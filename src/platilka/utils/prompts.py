from typing import List, Dict, Any, Optional
from platilka.models.product import ProductRequest

# Промпт для анализа запроса пользователя и определения недостающих полей
# ANALYZE_REQUEST_PROMPT = """
# Ты - помощник по выбору товаров. Твоя задача - проанализировать запрос пользователя и определить, достаточно ли информации для поиска товаров.
#
# Вот запрос пользователя:
# {request_json}
#
# Проанализируй следующие поля:
# 1. query - основной поисковый запрос (обязательное поле)
# 2. category - категория товара
# 3. price_range - диапазон цен
# 4. brand - предпочтительный бренд
# 5. features - необходимые характеристики/функции
# 6. exclude_features - нежелательные характеристики/функции
#
# Определи, каких данных не хватает для качественного поиска и формирования рекомендаций.
#
# Верни JSON в следующем формате:
# ```
# {{
#   "missing_fields": ["поле1", "поле2"],
#   "questions": ["Вопрос для уточнения поля1?", "Вопрос для уточнения поля2?"]
# }}
# ```
#
# Если информации достаточно, верни пустой список missing_fields и questions.
# """

# Промпт для формирования поискового запроса
GENERATE_SEARCH_QUERY_PROMPT = """
Ты - помощник по составлению эффективных поисковых запросов для поиска товаров. Тебе нужно составить оптимальный поисковый запрос для Google, чтобы найти товары на в интернет-магазинах.

Вот запрос пользователя с деталями о товаре:
{request_json}

Сформируй один поисковый запрос, который:
1. Включает основные ключевые слова из запроса пользователя
2. Добавляет важные характеристики из списка features (если указан)
3. Учитывает ценовой диапазон (если указан)
4. Включает бренд (если указан)
5. Оптимизирован для поиска в интернет-магазинах (если указаны предпочтительные)
6. Указывает ценовой диапазон из запроса

Верни только текст поискового запроса, без дополнительных комментариев или форматирования.
"""

# Промпт для извлечения информации о товаре со страницы
EXTRACT_PRODUCT_INFO_PROMPT = """
Ты - эксперт по извлечению информации о товарах с веб-страниц. Проанализируй содержимое страницы и извлеки информацию о товаре.

Содержимое страницы:
{page_content}

URL страницы: {page_url}

Извлеки следующую информацию:
1. Название товара
2. Описание товара
3. Цена товара (в числовом формате)
4. Валюта
5. URL изображения товара (если есть)
6. Рейтинг товара (если есть)
7. Количество отзывов (если есть)
8. Основные характеристики товара в формате "ключ: значение"
9. Доступность товара (в наличии, предзаказ, нет в наличии)

Верни информацию в формате JSON:
```json
{{
  "name": "Название товара",
  "description": "Описание товара",
  "price": 10000,
  "currency": "RUB",
  "image_url": "https://example.com/image.jpg",
  "rating": 4.5,
  "reviews_count": 123,
  "features": {
    "характеристика1": "значение1",
    "характеристика2": "значение2"
  },
  "availability": "В наличии"
}}
```

Если какой-то информации нет на странице, укажи null для соответствующего поля. Обрати особое внимание на точность и полноту извлекаемой информации.
"""

# Промпт для оценки товара на соответствие запросу пользователя
EVALUATE_PRODUCT_RELEVANCE_PROMPT = """
Ты - аналитик, оценивающий, насколько товар соответствует запросу пользователя. Проанализируй информацию о товаре и запрос пользователя.

Запрос пользователя:
{request_json}

Информация о товаре:
{product_json}

Оцени, насколько товар соответствует запросу пользователя по следующим критериям:
1. Товар должен быть в наличии
2. Соответствие категории (если указана в запросе)
3. Соответствие ценовому диапазону (если указан в запросе)
4. Соответствие бренду (если указан в запросе)
5. Наличие требуемых характеристик/функций (если указаны в запросе)
6. Отсутствие нежелательных характеристик/функций (если указаны в запросе)

Верни JSON с оценкой и обоснованием:
```json
{{
  "relevance_score": 0.85,
  "recommendation_reason": "Этот товар соответствует запросу потому что...",
  "missing_features": ["feature1", "feature2"],
  "has_excluded_features": false
}}
```

relevance_score должен быть в диапазоне от 0.0 до 1.0, где:
- 1.0 - полное соответствие всем требованиям
- 0.0 - полное несоответствие требованиям

Обоснование должно быть кратким, но информативным, на русском языке.
"""

# Промпт для формирования окончательных рекомендаций
GENERATE_RECOMMENDATIONS_PROMPT = """
Ты - эксперт по подбору товаров. Твоя задача - проанализировать найденные товары и сформировать окончательные рекомендации для пользователя.

Запрос пользователя:
{request_json}

Оцененные товары:
{evaluated_products_json}

На основе оценок релевантности и соответствия запросу, составь список рекомендаций из не более чем {max_recommendations} товаров. Для каждого товара укажи, почему он является хорошей рекомендацией.

Также, если ты видишь недостатки в запросе пользователя или есть возможности его улучшить, сформулируй 2-3 дополнительных вопроса, которые помогут уточнить запрос.

Верни JSON в следующем формате:
```json
{{
  "recommendations": [
    {{
      "product": "Информация о товаре из evaluated_products_json",
      "relevance_score": 0.95,
      "recommendation_reason": "Подробное обоснование рекомендации на русском языке"
    }}
  ],
  "additional_questions": [
    "Дополнительный вопрос 1?",
    "Дополнительный вопрос 2?"
  ]
}}
```

Обоснования должны быть персонализированными для запроса пользователя, информативными и на русском языке.
"""


# def get_analyze_request_prompt(request: ProductRequest) -> str:
#     """
#     Формирует промпт для анализа запроса пользователя
#
#     Args:
#         request: Запрос пользователя
#
#     Returns:
#         Промпт для анализа запроса
#     """
#     return ANALYZE_REQUEST_PROMPT.format(request_json=request.model_dump_json(indent=2))


def get_generate_search_query_prompt(request: ProductRequest) -> str:
    """
    Формирует промпт для генерации поискового запроса

    Args:
        request: Запрос пользователя

    Returns:
        Промпт для генерации поискового запроса
    """
    return GENERATE_SEARCH_QUERY_PROMPT.format(request_json=request.model_dump_json(indent=2))


def get_extract_product_info_prompt(page_content: str, page_url: str) -> str:
    """
    Формирует промпт для извлечения информации о товаре

    Args:
        page_content: Содержимое страницы
        page_url: URL страницы

    Returns:
        Промпт для извлечения информации
    """
    # Ограничиваем размер содержимого страницы для промпта
    max_content_length = 15000
    if len(page_content) > max_content_length:
        page_content = page_content[:max_content_length] + "..."

    return EXTRACT_PRODUCT_INFO_PROMPT.format(
        page_content=page_content,
        page_url=page_url
    )


def get_evaluate_product_relevance_prompt(request: ProductRequest, product_json: str) -> str:
    """
    Формирует промпт для оценки релевантности товара

    Args:
        request: Запрос пользователя
        product_json: JSON с информацией о товаре

    Returns:
        Промпт для оценки релевантности
    """
    return EVALUATE_PRODUCT_RELEVANCE_PROMPT.format(
        request_json=request.model_dump_json(indent=2),
        product_json=product_json
    )


def get_generate_recommendations_prompt(
        request: ProductRequest,
        evaluated_products_json: str,
        max_recommendations: int
) -> str:
    """
    Формирует промпт для генерации рекомендаций

    Args:
        request: Запрос пользователя
        evaluated_products_json: JSON с оцененными товарами
        max_recommendations: Максимальное количество рекомендаций

    Returns:
        Промпт для генерации рекомендаций
    """
    return GENERATE_RECOMMENDATIONS_PROMPT.format(
        request_json=request.model_dump_json(indent=2),
        evaluated_products_json=evaluated_products_json,
        max_recommendations=max_recommendations
    )